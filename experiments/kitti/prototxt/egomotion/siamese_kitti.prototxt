name: "CaffeNet"
layer {
  name: "data"
  type: "Data" 
  top: "data"
  include {
    phase: TRAIN
  }
  #transform_param {
  #  mean_file: "../data/mean_mnist.binaryproto"
  #}
  data_param {
    source: "../../data/kitti_train_egomotion_lmdb"
    batch_size: 128
    backend: LMDB
  }
}

#layer {
#  name: "data"
#  type: "Data" 
#  top: "data"
#  include {
#    phase: TEST
#    stage: "test-on-test"
#  }
#  data_param {
#    source: "../../data/kitti_val_egomotion_lmdb"
#    batch_size: 50 
#    backend: LMDB
#  }
#}

## SLICE DIMENSIONS
layer {
    name: "slice_data"
    type: "Slice"
    bottom: "data"
    top: "data0"
    top: "data1"
    top: "labelx"
    top: "labely"
    top: "labelz"
    slice_param {
      axis: 1
      slice_point: 3 
      slice_point: 6
      slice_point: 7
      slice_point: 8
    }
}

layer {
  name: "argmaxX"
  type: "ArgMax"
  bottom: "labelx"
  top: "argmxX"
}

layer {
  name: "argmaxY"
  type: "ArgMax"
  bottom: "labely"
  top: "argmxY"
}

layer {
  name: "argmaxZ"
  type: "ArgMax"
  bottom: "labelz"
  top: "argmxZ"
}



## FIRST SIAMESE COMPONENT
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data0"
  top: "conv1"
  param {
    name: "conv1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    name: "conv2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    name: "conv3_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    name: "conv4_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    name: "conv5_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

## SECOND SIAMESE COMPONENT
layer {
  name: "conv1_p"
  type: "Convolution"
  bottom: "data1"
  top: "conv1_p"
  param {
    name: "conv1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
  }
}
layer {
  name: "relu1_p"
  type: "ReLU"
  bottom: "conv1_p"
  top: "conv1_p"
}
layer {
  name: "pool1_p"
  type: "Pooling"
  bottom: "conv1_p"
  top: "pool1_p"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1_p"
  type: "LRN"
  bottom: "pool1_p"
  top: "norm1_p"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2_p"
  type: "Convolution"
  bottom: "norm1_p"
  top: "conv2_p"
  param {
    name: "conv2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
  }
}
layer {
  name: "relu2_p"
  type: "ReLU"
  bottom: "conv2_p"
  top: "conv2_p"
}
layer {
  name: "pool2_p"
  type: "Pooling"
  bottom: "conv2_p"
  top: "pool2_p"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2_p"
  type: "LRN"
  bottom: "pool2_p"
  top: "norm2_p"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3_p"
  type: "Convolution"
  bottom: "norm2_p"
  top: "conv3_p"
  param {
    name: "conv3_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_p"
  type: "ReLU"
  bottom: "conv3_p"
  top: "conv3_p"
}
layer {
  name: "conv4_p"
  type: "Convolution"
  bottom: "conv3_p"
  top: "conv4_p"
  param {
    name: "conv4_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu4_p"
  type: "ReLU"
  bottom: "conv4_p"
  top: "conv4_p"
}
layer {
  name: "conv5_p"
  type: "Convolution"
  bottom: "conv4_p"
  top: "conv5_p"
  param {
    name: "conv5_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu5_p"
  type: "ReLU"
  bottom: "conv5_p"
  top: "conv5_p"
}
layer {
  name: "pool5_p"
  type: "Pooling"
  bottom: "conv5_p"
  top: "pool5_p"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}


## TOP LAYERS
## C256-C128-F500-D-Op
layer {
  name: "concat"
  bottom: "pool5"
  bottom: "pool5_p"
  top: "concat"
  type: "Concat"
  concat_param {
    axis: 1
  }
}

layer {
  name: "conv6"
  type: "Convolution"
  bottom: "concat"
  top: "conv6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "conv6"
  top: "conv6"
}
layer {
  name: "conv7"
  type: "Convolution"
  bottom: "conv6"
  top: "conv7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128 
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "conv7"
  top: "conv7"
}

layer {
  bottom: "conv7"
  top: "fc500"
  name: "fc500"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  type: "InnerProduct"
  inner_product_param {
    num_output: 500 
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu8"
  type: "ReLU"
  bottom: "fc500"
  top: "fc500"
}
layer {
  name: "drop"
  type: "Dropout"
  bottom: "fc500"
  top: "fc500"
  dropout_param {
    dropout_ratio: 0.5
  }
}






### TOP CLASSIFIERS, ONE FOR EACH DIMENSION
layer {
  bottom: "fc500"
  top: "fcx"
  name: "fcx"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  type: "InnerProduct"
  inner_product_param {
    num_output: 20 
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  bottom: "fc500"
  top: "fcy"
  name: "fcy"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  type: "InnerProduct"
  inner_product_param {
    num_output: 20 
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  bottom: "fc500"
  top: "fcz"
  name: "fcz"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  type: "InnerProduct"
  inner_product_param {
    num_output: 20
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "loss_x"
  type: "SoftmaxWithLoss"
  bottom: "fcx"
  bottom: "argmxX"
  top: "loss_x"
  loss_weight:1
  include {
      phase: TRAIN
    }
}

layer {
  name: "loss_y"
  type: "SoftmaxWithLoss"
  bottom: "fcy"
  bottom: "argmxY"
  top: "loss_y"
  loss_weight:1
  include {
      phase: TRAIN
    }
}

layer {
  name: "loss_z"
  type: "SoftmaxWithLoss"
  bottom: "fcz"
  bottom: "argmxZ"
  top: "loss_z"
  loss_weight:1
  include {
      phase: TRAIN
    }
}


### TEST NETWORK ON TRAIN SET
layer {
  name: "test_loss_train_x"
  type: "SoftmaxWithLoss"
  bottom: "fcx"
  bottom: "argmxX"
  top: "test_loss_train_x"
  loss_weight:1
  include {
    phase: TEST
    stage: "test-on-train"
  }
}

layer {
  name: "test_loss_train_y"
  type: "SoftmaxWithLoss"
  bottom: "fcy"
  bottom: "argmxY"
  top: "test_loss_train_y"
  loss_weight:1
  include {
    phase: TEST
    stage: "test-on-train"
  }
}

layer {
  name: "test_loss_train_z"
  type: "SoftmaxWithLoss"
  bottom: "fcz"
  bottom: "argmxZ"
  top: "test_loss_train_z"
  loss_weight:1
  include {
    phase: TEST
    stage: "test-on-train"
  }
}

layer {
  name: "accuracy_train_X"
  type: "Accuracy"
  bottom: "fcx"
  bottom: "argmxX"
  top: "accuracy_train_X"
  include {
    phase: TEST
    stage: "test-on-train"
  }
}

layer {
  name: "accuracy_train_Y"
  type: "Accuracy"
  bottom: "fcy"
  bottom: "argmxY"
  top: "accuracy_train_Y"
  include {
    phase: TEST
    stage: "test-on-train"
  }
}

layer {
  name: "accuracy_train_Z"
  type: "Accuracy"
  bottom: "fcz"
  bottom: "argmxZ"
  top: "accuracy_train_Z"
  include {
    phase: TEST
    stage: "test-on-train"
  }
}


### TEST NETWORK ON VALIDATION SET
layer {
  name: "test_loss_x"
  type: "SoftmaxWithLoss"
  bottom: "fcx"
  bottom: "argmxX"
  top: "test_loss_x"
  loss_weight:1
  include {
    phase: TEST
    stage: "test-on-test"
  }
}

layer {
  name: "test_loss_y"
  type: "SoftmaxWithLoss"
  bottom: "fcy"
  bottom: "argmxY"
  top: "test_loss_y"
  loss_weight:1
  include {
    phase: TEST
    stage: "test-on-test"
  }
}

layer {
  name: "test_loss_z"
  type: "SoftmaxWithLoss"
  bottom: "fcz"
  bottom: "argmxZ"
  top: "test_loss_z"
  loss_weight:1
  include {
    phase: TEST
    stage: "test-on-test"
  }
}

layer {
  name: "accuracy_test_X"
  type: "Accuracy"
  bottom: "fcx"
  bottom: "argmxX"
  top: "accuracy_test_X"
  include {
    phase: TEST
    stage: "test-on-test"
  }
}

layer {
  name: "accuracy_test_Y"
  type: "Accuracy"
  bottom: "fcy"
  bottom: "argmxY"
  top: "accuracy_test_Y"
  include {
    phase: TEST
    stage: "test-on-test"
  }
}

layer {
  name: "accuracy_test_Z"
  type: "Accuracy"
  bottom: "fcz"
  bottom: "argmxZ"
  top: "accuracy_test_Z"
  include {
    phase: TEST
    stage: "test-on-test"
  }
}
