name: "MNIST"
layer {
  name: "data_train"
  type: "Data" 
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  #transform_param {
  #  mean_file: "../../data/mean_mnist.binaryproto"
  #}
  data_param {
    source: "../../data/mnist_train_standar_lmdb"
    batch_size: 125 
    backend: LMDB
  }
}

layer {
  name: "data_test_train"
  type: "Data" 
  top: "data"
  top: "label"
  include {
    phase: TEST
    stage: "test-on-train"
  }
  #transform_param {
  #  mean_file: "../../data/mean_mnist.binaryproto"
  #}
  data_param {
    source: "../../data/mnist_train_standar_lmdb"
    batch_size: 20 
    backend: LMDB
  }
}

layer {
  name: "data_test"
  type: "Data" 
  top: "data"
  top: "label"
  include {
    phase: TEST
    stage: "test-on-test"
  }
  #transform_param {
  #  mean_file: "../../data/mean_mnist.binaryproto"
  #}
  data_param {
    source: "../../data/mnist_test_lmdb"
    batch_size: 20 
    backend: LMDB
  }
}



# BCNN 
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    name: "conv1_w"
    lr_mult: 0
  }
  param {
    name: "conv1_b"
    lr_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}

layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    name: "conv2_w"
    lr_mult: 0
  }
  param {
    name: "conv2_b"
    lr_mult: 0
  }
  convolution_param {
    num_output: 256 
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
} 

layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}


layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  bottom: "pool2"
  top: "fc_finetune"
  name: "fc_finetune"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  type: "InnerProduct"
  inner_product_param {
    num_output: 500 
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu3"
  type: "ReLU"
  bottom: "fc_finetune"
  top: "fc_finetune"
}

layer {
  name: "drop"
  type: "Dropout"
  bottom: "fc_finetune"
  top: "fc_finetune"
  dropout_param {
    dropout_ratio: 0.5
  }
}




layer {
  bottom: "fc_finetune"
  top: "fc"
  name: "fc"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  type: "InnerProduct"
  inner_product_param {
    num_output: 10 
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc"
  bottom: "label"
  top: "loss"
  loss_weight:1
  include {
      phase: TRAIN
  }
}

### TEST NETWORK ON TRAIN SET
layer {
  name: "train_accuracy"
  type: "Accuracy"
  bottom: "fc"
  bottom: "label"
  top: "train_accuracy"
  include {
    phase: TEST
    stage: "test-on-train"
  }
}

layer {
  name: "test_accuracy"
  type: "Accuracy"
  bottom: "fc"
  bottom: "label"
  top: "test_accuracy"
  include {
    phase: TEST
    stage: "test-on-test"
  }
}

layer {
  name: "test_train_loss"
  type: "SoftmaxWithLoss"
  bottom: "fc"
  bottom: "label"
  top: "test_train_loss"
  loss_weight:1
  include {
    phase: TEST
    stage: "test-on-train"
  }
}

layer {
  name: "test_loss"
  type: "SoftmaxWithLoss"
  bottom: "fc"
  bottom: "label"
  top: "test_loss"
  loss_weight:1
  include {
    phase: TEST
    stage: "test-on-test"
  }
}
